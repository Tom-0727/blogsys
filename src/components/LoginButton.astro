---
// src/components/LoginButton.astro - Component for user authentication
import { SITE_TITLE } from '../consts';
import jwt from 'jsonwebtoken';

export const prerender = false;

// 检查登录状态
let isLoggedIn = false;
let user: { id: number; email: string; username: string } | null = null;

try {
  const token = Astro.cookies.get('token')?.value;
  if (token) {
    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'your-secret-key') as any;
    if (decoded && decoded.userId) {
      isLoggedIn = true;
      user = {
        id: decoded.userId,
        email: decoded.email,
        username: decoded.username || decoded.email.split('@')[0] // 如果没有用户名就用邮箱前缀
      };
    }
  }
} catch (error) {
  // Token 无效或过期
  isLoggedIn = false;
  user = null;
}

// Auth provider configs - in a real app, these would be environment variables
const authProviders = [
  {
    name: 'Google',
    icon: `<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="currentColor">
            <path d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z" />
            <path d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z" />
            <path d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l3.66-2.84z" />
            <path d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z" />
          </svg>`,
    action: '/api/auth/google'
  },
  {
    name: 'GitHub',
    icon: `<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="currentColor">
            <path d="M12 2C6.48 2 2 6.48 2 12c0 4.42 2.87 8.17 6.84 9.5.5.08.66-.23.66-.5v-1.69c-2.77.6-3.36-1.34-3.36-1.34-.46-1.16-1.11-1.47-1.11-1.47-.91-.62.07-.6.07-.6 1 .07 1.53 1.03 1.53 1.03.87 1.52 2.34 1.07 2.91.83.09-.65.35-1.09.63-1.34-2.22-.25-4.55-1.11-4.55-4.92 0-1.11.38-2 1.03-2.71-.1-.25-.45-1.29.1-2.64 0 0 .84-.27 2.75 1.02.79-.22 1.65-.33 2.5-.33.85 0 1.71.11 2.5.33 1.91-1.29 2.75-1.02 2.75-1.02.55 1.35.2 2.39.1 2.64.65.71 1.03 1.6 1.03 2.71 0 3.82-2.34 4.66-4.57 4.91.36.31.69.92.69 1.85V21c0 .27.16.59.67.5C19.14 20.16 22 16.42 22 12A10 10 0 0 0 12 2z" />
          </svg>`,
    action: '/api/auth/github'
  }
];
---

<div class="auth-container">
  {isLoggedIn && user ? (
    <div class="user-menu">
      <div class="user-info">
        <span class="greeting">你好，{user.username}</span>
        <button class="logout-btn" id="logout-btn">登出</button>
      </div>
    </div>
  ) : (
    <div class="auth-buttons">
      <button class="login-button" id="login-button">
        Log In
      </button>
      
      <div class="auth-modal" id="auth-modal">
        <div class="auth-modal-content">
          <div class="auth-modal-header">
            <h3>Log in to {SITE_TITLE}</h3>
            <button class="close-button" id="close-modal">×</button>
          </div>
          
          <div class="auth-modal-body">
            <!-- <div class="auth-providers">
              {authProviders.map(provider => (
                <a href={provider.action} class="auth-provider-button">
                  <span class="provider-icon" set:html={provider.icon} />
                  <span>Continue with {provider.name}</span>
                </a>
              ))}
            </div> 
            
            <div class="auth-divider">
              <span>or</span>
            </div> -->
            
            <form class="auth-form">
              <div class="form-group">
                <label for="email">Email</label>
                <input type="email" id="email" name="email" required />
              </div>
              
              <div class="form-group">
                <label for="password">Password</label>
                <input type="password" id="password" name="password" required />
              </div>
              
              <button type="submit" class="auth-submit">Log In</button>
            </form>
            
            <p class="signup-prompt">
              还没有账户？<a href="/signup">立即注册</a>
            </p>
          </div>
        </div>
      </div>
    </div>
  )}
</div>

<style>
  .auth-container {
    position: relative;
  }
  
  .login-button {
    background-color: var(--accent);
    color: white;
    border: none;
    border-radius: 20px;
    padding: 0.5rem 1.5rem;
    font-size: 0.9rem;
    cursor: pointer;
    transition: background-color 0.2s;
  }
  
  .login-button:hover {
    background-color: var(--accent-dark);
  }
  
  /* User info styles when logged in */
  .user-info {
    display: flex;
    align-items: center;
    gap: 1rem;
  }
  
  .greeting {
    font-size: 0.9rem;
    color: rgb(var(--gray-dark));
  }
  
  .logout-btn {
    background: none;
    border: 1px solid rgba(var(--gray), 30%);
    border-radius: 20px;
    padding: 0.3rem 1rem;
    font-size: 0.8rem;
    cursor: pointer;
    color: rgb(var(--gray-dark));
    transition: all 0.2s;
  }
  
  .logout-btn:hover {
    background-color: rgba(var(--gray-light), 50%);
    border-color: rgba(var(--gray), 50%);
  }

  /* User menu styles when logged in */
  .user-menu {
    position: relative;
  }
  
  .user-button {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background: none;
    border: none;
    padding: 0.5rem;
    cursor: pointer;
    border-radius: 20px;
    transition: background-color 0.2s;
  }
  
  .user-button:hover {
    background-color: rgba(var(--gray-light), 70%);
  }
  
  .user-avatar {
    width: 32px;
    height: 32px;
    border-radius: 50%;
  }
  
  .user-name {
    font-size: 0.9rem;
  }
  
  .dropdown-menu {
    position: absolute;
    right: 0;
    top: 100%;
    width: 200px;
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    overflow: hidden;
    z-index: 100;
    display: none;
  }
  
  .user-menu:hover .dropdown-menu,
  .dropdown-menu:hover {
    display: block;
  }
  
  .dropdown-item {
    display: block;
    padding: 0.75rem 1rem;
    text-decoration: none;
    color: rgb(var(--gray-dark));
    transition: background-color 0.2s;
  }
  
  .dropdown-item:hover {
    background-color: rgba(var(--gray-light), 50%);
  }
  
  .dropdown-divider {
    height: 1px;
    background-color: rgba(var(--gray-light), 100%);
    margin: 0.25rem 0;
  }
  
  .logout-button {
    width: 100%;
    text-align: left;
    background: none;
    border: none;
    cursor: pointer;
    font-size: inherit;
    font-family: inherit;
    color: #e53935;
  }
  
  /* Auth modal styles */
  .auth-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.3s;
  }
  
  .auth-modal.show {
    opacity: 1;
    pointer-events: auto;
  }
  
  .auth-modal-content {
    width: 100%;
    max-width: 400px;
    background-color: white;
    border-radius: 12px;
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);
    overflow: hidden;
  }
  
  .auth-modal-header {
    padding: 1.5rem;
    border-bottom: 1px solid rgba(var(--gray-light), 100%);
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  .auth-modal-header h3 {
    margin: 0;
    font-size: 1.2rem;
    color: rgb(var(--gray-dark));
  }
  
  .close-button {
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    color: rgb(var(--gray));
  }
  
  .auth-modal-body {
    padding: 1.5rem;
  }
  
  .auth-providers {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    margin-bottom: 1.5rem;
  }
  
  .auth-provider-button {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.75rem;
    padding: 0.75rem 1rem;
    border: 1px solid rgba(var(--gray), 30%);
    border-radius: 8px;
    text-decoration: none;
    color: rgb(var(--gray-dark));
    transition: background-color 0.2s;
  }
  
  .auth-provider-button:hover {
    background-color: rgba(var(--gray-light), 50%);
  }
  
  .provider-icon {
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .auth-divider {
    position: relative;
    text-align: center;
    margin: 1.5rem 0;
  }
  
  .auth-divider:before {
    content: "";
    position: absolute;
    top: 50%;
    left: 0;
    right: 0;
    height: 1px;
    background-color: rgba(var(--gray-light), 100%);
  }
  
  .auth-divider span {
    position: relative;
    padding: 0 0.75rem;
    background-color: white;
    color: rgb(var(--gray));
    font-size: 0.9rem;
  }
  
  .auth-form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  
  .form-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }
  
  .form-group label {
    font-size: 0.9rem;
    color: rgb(var(--gray-dark));
  }
  
  .form-group input {
    padding: 0.75rem;
    border: 1px solid rgba(var(--gray), 30%);
    border-radius: 8px;
    font-size: 1rem;
    font-family: inherit;
  }
  
  .form-group input:focus {
    outline: 2px solid var(--accent);
    border-color: transparent;
  }
  
  .forgot-password {
    text-align: right;
    font-size: 0.9rem;
  }
  
  .forgot-password a {
    color: var(--accent);
    text-decoration: none;
  }
  
  .auth-submit {
    margin-top: 1rem;
    padding: 0.75rem;
    background-color: var(--accent);
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 1rem;
    cursor: pointer;
    transition: background-color 0.2s;
  }
  
  .auth-submit:hover {
    background-color: var(--accent-dark);
  }
  
  .signup-prompt {
    margin-top: 1.5rem;
    text-align: center;
    font-size: 0.9rem;
    color: rgb(var(--gray));
  }
  
  .signup-prompt a {
    color: var(--accent);
    text-decoration: none;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const loginButton = document.getElementById('login-button');
    const authModal = document.getElementById('auth-modal');
    const closeModal = document.getElementById('close-modal');
    const authForm = document.querySelector('.auth-form');
    const logoutBtn = document.getElementById('logout-btn');
    
    // 登录模态框处理
    if (loginButton && authModal && closeModal) {
      loginButton.addEventListener('click', () => {
        authModal.classList.add('show');
      });
      
      closeModal.addEventListener('click', () => {
        authModal.classList.remove('show');
      });
      
      authModal.addEventListener('click', (e) => {
        if (e.target === authModal) {
          authModal.classList.remove('show');
        }
      });
    }
    
    // 登录表单处理
    authForm?.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const email = document.getElementById('email') as HTMLInputElement;
      const password = document.getElementById('password') as HTMLInputElement;
      
      try {
        const response = await fetch('/api/auth/login', {
          method: 'POST',
          credentials: 'include', // 确保携带cookies
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            email: email.value,
            password: password.value,
          }),
        });
        
        const data = await response.json();
        
        if (response.ok) {
          // 登录成功
          window.location.reload(); // 刷新页面以更新UI
        } else {
          // 显示错误信息
          alert(data.error || '登录失败');
        }
      } catch (error) {
        console.error('Login error:', error);
        alert('登录时发生错误');
      }
    });
    
    // 登出处理
    logoutBtn?.addEventListener('click', async () => {
      try {
        const response = await fetch('/api/auth/logout', {
          method: 'POST',
          credentials: 'include', // 确保携带cookies
          headers: {
            'Content-Type': 'application/json',
          },
        });
        
        if (response.ok) {
          // 登出成功，刷新页面
          window.location.reload();
        } else {
          const data = await response.json().catch(() => ({}));
          console.error('Logout failed:', response.status, data);
          alert(data.error || '登出失败');
        }
      } catch (error) {
        console.error('Logout error:', error);
        alert('登出时发生网络错误，请检查网络连接');
      }
    });
  });
</script>